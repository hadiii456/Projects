import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

@SuppressWarnings("serial")

public class LavaJump extends JPanel implements KeyListener, ActionListener {

	//variables
	static boolean coinHit = false;
	static boolean coinHit3 = false;
	static boolean repeat1 = false;
	static boolean repeat2 = false;
	static boolean enemyHit1 = false;
	static boolean enemyHit2 = false;
	static boolean enemyHit3 = false;
	static boolean enemyHit4= false;
	static boolean enemyHit5 = false;
	static boolean coinHit2 = false;
	static boolean enemyHit7 = false;
	static boolean start = false;
	static boolean deleteB1= false;
	static boolean deleteB2= false;
	static boolean deleteB3= false;
	static int x_lava = 0;
	static int y_lava = 800;
	public static int ticks=0;
	int xa = 1;
	static double ya = -1;
	int ya2=1;
	static int x_cube = 140;
	 static int y_cube = 640;
	static int y_plat_r1=-800;
	static int delay = 8;
	static Timer RealTimer = new Timer(delay, null);
	static int round = 1;
	
	static int opy1= -400;
	static int opy2=-200;
	static int opy3=-200;
	static int opy4= -1000;
	static int opy5= -300;	
	static int ocy2= -800;
	static int opy7=-400;

	static int py1= y_plat_r1+400;
	static int py2=y_plat_r1+600;
	static int py3=y_plat_r1+600;
	static int py4= y_plat_r1-200;
	static int py5= y_plat_r1+500;
	static int cy2= y_plat_r1;
	static int cy3= y_plat_r1-400;
	static int py7=y_plat_r1+400;
	
	static int px1=50;
	static int px2=200;
	static int px3=70;
	static int px4=150;
	static int px5=200;
	static int cx2=50;
	static int px7=240;
	static int cx3=240;


	static int cy1= y_plat_r1+550;
	static int ocy1= -250;
	static int ocy3= -1200;
	static int cx1=200;

	static int cubecord=(x_cube+y_cube);
	static int enemycord=(px1+py1);
	
	static int score= 0;
	public static int speed=2;
	public static boolean cont=true;
	
	static Rectangle cube= new Rectangle (x_cube,y_cube,30,30);
	static Rectangle lava = new Rectangle (x_lava, y_lava, 300, 800);
	static Rectangle coin= new Rectangle (cx1,cy1,30,30);
	
	static Rectangle enemy7= new Rectangle (px7,py7,100,30);
	static Rectangle coin2= new Rectangle (cx2,cy2,30,30);
	static Rectangle coin3= new Rectangle (cx3,cy3,30,30);
	static Rectangle enemy5= new Rectangle (px5,py5,30,30);
	
	
	
	static Rectangle enemy4= new Rectangle (px4,py4,300,30);
	
	
	static Rectangle enemy3= new Rectangle (px3,py3,30,30);
	
	
	static Rectangle enemy2=new Rectangle (px2,py2,30,30);
	

	static Rectangle enemy1=new Rectangle (px1,py1,140,50);
	
	static Rectangle B1=new Rectangle (80,37,7,14);
	static Rectangle B2=new Rectangle (90,37,7,14);
	static Rectangle B3=new Rectangle (100,37,7,14);
	

	public LavaJump()
	{
		
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		
		
	}
	

		@Override
	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		// LAVA
		
		g.setColor(Color.black.darker());	
		g.fillRect(0, 0, 300, 800);
		
		g.setColor(Color.green);

		//moves all enemies to -800 if you reach top of window
		//make variable py1-800=reset 
		if (y_cube==1)
		{
	
		py1=opy1;
		py2 =opy2;
		py3 =opy3;
		py4 =opy4;
		py5=opy5;
		cy2 =ocy2;
		cy3 =ocy3;
		
		cy1 =ocy1;
		
		coinHit=false;
		enemyHit1=false;
		enemyHit2=false;
		enemyHit3=false;
		enemyHit4=false;
		enemyHit5=false;
		coinHit2=false;
		coinHit3=false;
		enemyHit7=false;
		}
		
		//draws enemies
			
				g.setColor(Color.red.darker());
				
				
				// ENEMY1	
				if (enemyHit1 == false)
				{
					//g.setColor(Color.blue.darker());
					((Graphics2D) g).fill(enemy1);
				}
				
				// ENEMY2
				if (enemyHit2 == false)
				{
					//g.setColor(Color.green.darker());
					((Graphics2D) g).fill(enemy2);
				}

				// ENEMY3	
				if (enemyHit3 == false)
				{
					//g.setColor(Color.cyan.darker());
					((Graphics2D) g).fill(enemy3);
				}
				
//				 ENEMY4	
				if (enemyHit4 == false)
				{
					//g.setColor(Color.white);
					((Graphics2D) g).fill(enemy4);
				}
				
				// ENEMY5
				
				if (enemyHit5 == false)				{
				//g.setColor(Color.red);
					((Graphics2D) g).fill(enemy5);
				}
				
//				 coin2	
				if (coinHit2 == false)
				{
					g.setColor(Color.yellow);
					((Graphics2D) g).fill(coin2);
					
				}
				if (coinHit3 == false)
				{
					g.setColor(Color.yellow);
					((Graphics2D) g).fill(coin3);
					
				}
				
				// ENEMY7	
				if (enemyHit7 == false)
				{
					g.setColor(Color.pink);
					((Graphics2D) g).fill(enemy7);
				}

				//coin
				if (coinHit == false)
				{
					g.setColor(Color.yellow);
					((Graphics2D) g).fill(coin);
				}			

				
				
			
				g.setColor(Color.red.darker());
				((Graphics2D) g).fill(lava);	

		// creates infinite loop of lava
		if (y_lava == 0) 
		{
			y_lava = 800;
			((Graphics2D) g).fill(lava);
		}
		else if(y_cube==1)
		{
			y_lava = 800;
			((Graphics2D) g).fill(lava);
		}

		// cube creation + resets cube if you reach top
		g.setColor(Color.green);
		((Graphics2D) g).fill(cube);
		
		
		
		
		if (y_cube == 1) {
			y_cube = 700;
			g.fillRect(x_lava, y_lava, 30, 30);
		}

		
		
		g.setFont(new Font("arial bold", 20, 20));
		
		g.setColor(Color.red);
		
		
		//Game over statement
		if (y_cube==y_lava || cont==false)
		{
			g.setFont(new Font("arial bold", 10, 15));
			g.drawString("G4m3 0v3R", 100, 150);
			
		}
		
		
		
		///round statement
		g.setColor(Color.white);
	String stringround=("Round: "+round);
	g.drawString(stringround , 190, 30);
		
		//score statement
		g.setColor(Color.white);
		String stringscore=("Score: "+score);
		g.drawString(stringscore , 10, 30);
		
		//health
		String health=("Health: ");
		g.drawString(health , 10, 50);
				
		//coin
		g.setColor(Color.green);
			
		if ( deleteB1 == false)
		{
			((Graphics2D) g).fill(B1);
		}		
		
		if ( deleteB2 == false)
		{
			((Graphics2D) g).fill(B2);
		}
		
		if ( deleteB3 == false)
		{
			((Graphics2D) g).fill(B3);
		}
		
		if(start!=true)
		{
		String tittle = ("LAVA JUMP");
		String menu = ("Press Enter to start");
		g.setColor(Color.orange);
		g.setFont(new Font("arial bold", 10, 50));
		g.drawString(tittle , -3, 180);
		g.setColor(Color.red);
		g.drawString(tittle , 2, 177);
		g.setFont(new Font("arial bold", 10, 20));
		g.setColor(Color.white);
		g.drawString(menu, 50, 200);
		String legend1 =("Coins +1=     Collect 3 to pass");
		
		g.setColor(Color.yellow);
		g.drawString(legend1,0,330);
		g.fillRect(105, 315, 20, 20);
		
		String legend2 =("Lava= DEATH,       = -1 Health");
		g.setColor(Color.red);
		g.fillRect(150, 340, 20, 20);
		g.drawString(legend2, 0, 360);
		
		g.setColor(Color.white);
		String legend3 =("lava speeds up each round!");
		g.drawString(legend3, 10, 385);
		}
	}

	
	
	public static void main(String[] args) throws InterruptedException {

		// window setup
		JFrame frame = new JFrame("Lava Jump");
		LavaJump Game = new LavaJump();
		frame.add(Game);
		frame.setSize(300, 800);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//main loop of program
		while (y_cube!=y_lava && cont==true ) 
		{
			
		
			
			//System.out.println(cy1+"||"+y_cube+"||"+score);
		
		
			
			if (start==true)
			{
			Game.moveLavaUP();
			Game.movePLatDOWN();
			}
			Game.repaint();
			Thread.sleep(12);
			
		
			
			
			
			if (cube.intersects(lava))
			{
				cont=false;
			}
			//if you reach top of window do this
			if (y_cube==1 )
			{	
			
				y_cube=1;
			}
			
				
			if (round*3==score)
			{
			round++;
			}
			
			
			 
			if(cube.intersects(coin) && coinHit==false) 
			{	
				
				coinHit = true;
				score++;				
			}
			
			if(cube.intersects(enemy1) && enemyHit1 == false) 
			{	
				enemyHit1= true;
			
				healthCheck();
			}
			
			if(cube.intersects(enemy2) && enemyHit2 == false) 
			{	
				enemyHit2= true;
				healthCheck();
			}
			
			if(cube.intersects(enemy3) && enemyHit3 == false) 
			{	
				enemyHit3= true;	
				healthCheck();
			}
			
			if(cube.intersects(enemy4) && enemyHit4 == false) 
			{	
				enemyHit4= true;	
				healthCheck();
			}
			
			if(cube.intersects(enemy5) && enemyHit5 == false) 
			{	
				enemyHit5= true;
				healthCheck();
			}
			if(cube.intersects(coin2) && coinHit2 == false) 
			{	
				coinHit2= true;
				score++;
			}
			if(cube.intersects(coin3) && coinHit3 == false) 
			{	
				coinHit3= true;
				score++;
			}
			
			if(cube.intersects(enemy7) && enemyHit7 == false) 
			{	
				enemyHit7= true;	
				healthCheck();
			}
		}
	
	}
	

	

	private void moveLavaUP() 
	{

	
		y_lava+=ya;
		lava.setLocation(x_lava, y_lava);
		
	}
	//moves enemies down ignore method name
	private void movePLatDOWN() {
		cy3 +=speed;
		py1 +=speed;
		py2 +=speed;
		py3 +=speed;
		py4 +=speed;
		py5 += speed;
		cy2 +=speed;
		cy1 +=speed;
		
		
		coin3.setLocation(cx3,cy3);
		coin.setLocation(cx1, cy1);
		enemy1.setLocation(px1, py1);
		enemy2.setLocation(px2, py2);
		enemy3.setLocation(px3, py3);
		enemy4.setLocation(px4, py4);
		enemy5.setLocation(px5, py5);
		coin2.setLocation(cx2, cy2);	
		enemy7.setLocation(px7, py7);
		
		
	}

	public  void jump() 
	{
	if(start!=false)
	  {
	for (int i=20; i>0; i--)
		{	
			y_cube--;
			cube.setLocation(x_cube, y_cube);
		}	
	  }
	}
	
	public static void healthCheck()
	{
		if (deleteB1==false)
		{
			deleteB1=true;
		}
		else if (deleteB1==true && deleteB2==false)
		{
			deleteB2=true;
		}
		else if(deleteB1==true && deleteB2==true && deleteB3==false)
		{
			deleteB3=true;
			cont=false;	
		}
	}

	public static void left() {
		if (start!=false)
		{
		x_cube -= 20;
		cube.setLocation(x_cube, y_cube);
		}
	}

	public static void right() {
		if (start!=false)
		{
		x_cube += 20;
		cube.setLocation(x_cube, y_cube);
		}
	}
	
	public static void down() {
		if (start!=false)
		{	
		y_cube += 20;
		cube.setLocation(x_cube, y_cube);
		}
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		

	}

	@Override
	public void keyReleased(KeyEvent e) {
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_UP) 
		{
			if(y_cube<=0)
			{
				y_cube=1;
			}
			else
			{
				jump();
			}
		}

		else if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			if (x_cube <= 0) 
			{
				x_cube = 0;				
			} 
			
			else 			
			{
				left();
			}
		}

		else if (e.getKeyCode() == KeyEvent.VK_RIGHT) 
		{
				if (x_cube >= 250) 
				{
					x_cube = 250;				
				} 
				
				else 			
				{
					right();
				}
		}

		else if (e.getKeyCode() == KeyEvent.VK_DOWN) 
		{
			down();	
		}
			
		
		else if (e.getKeyCode() == KeyEvent.VK_DOWN) 
		{
			right();
		}

		else if (e.getKeyCode() == KeyEvent.VK_ENTER) 
		{
		
			start=true;
			
//			if(deleteB1==true && deleteB2==true && deleteB3==true)
//			{
//			deleteB1=false;
//			deleteB2=false;
//			deleteB3=false;
//			}
		}
		

	}

	@Override
	public void keyTyped(KeyEvent e) {
	
	
	}
	
}

